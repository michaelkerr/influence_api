	##If graph requested
	#if for_params['return_graph'] is not None:
		#if for_params['return_graph'].lower() == 'true':
			##If format = data
			#if for_params['format'] is None:
				##Append the graph data
				#data_results['graph'] = nx.to_edgelist(G, nodelist=None)
			##If format = graphml
			#elif for_params['format'].lower() == 'graphml':
				##Create the graphml filename
				#graphml_name = create_filename(params)
				##Get the graphml data
				#graphml_data = '\n'.join(nx.generate_graphml(G))
				##Add the versioning
				#graphml_final = '<?xml version="1.0" encoding="UTF-8"?>' + "\n" + '<!--'
				#for key, value in params.iteritems():
					#if value is not None:
						#graphml_final += key + ': ' + value + ', '
				#graphml_final += '-->'
				#h = HTMLParser.HTMLParser()

				#for line in graphml_data.split("\n"):
					##Escape the html content
					#line = h.unescape(line)
					##For each node add appropriate metric data into the graphml
					#if '<node id="' in line:
						#graphml_final += (line.replace('/>', '>') + "\n")
						#node_name = line.partition('"')[-1].rpartition('"')[0]
						#if (node_name is None) or(node_name is ''):
							#graphml_final += '      <data key="d1">' + 'NODE NAME ERROR' + '</data>' + "\n"
						#else:
							#graphml_final += '      <data key="d1">' + str(calc_metric[node_name]) + '</data>' + "\n"
						#graphml_final += '    </node>' + "\n"
					#else:
						#graphml_final += line + "\n"
						##Add the key for the metric attribute
						#if '<key' in line:
							#graphml_final += '  <key attr.name="' + params['metric'] + '" attr.type="float" for="node" id="d1" />'

				##Create the appropriate response to return the graphml
				#response = make_response(graphml_final)
				#response.headers["Content-Type"] = 'text/xml'
				#response.headers["Content-Disposition"] = 'attachment; filename=' + graphml_name
				#return response 
